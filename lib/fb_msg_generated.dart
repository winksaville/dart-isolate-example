// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MsgBodyTypeId {
  final int value;
  const MsgBodyTypeId._(this.value);

  factory MsgBodyTypeId.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum MsgBodyTypeId');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  static const MsgBodyTypeId NONE = const MsgBodyTypeId._(0);
  static const MsgBodyTypeId People = const MsgBodyTypeId._(1);
  static const MsgBodyTypeId Cars = const MsgBodyTypeId._(2);
  static const MsgBodyTypeId Timestamps = const MsgBodyTypeId._(3);
  static get values => {0: NONE,1: People,2: Cars,3: Timestamps,};

  static const fb.Reader<MsgBodyTypeId> reader = const _MsgBodyTypeIdReader();

  @override
  String toString() {
    return 'MsgBodyTypeId{value: $value}';
  }
}

class _MsgBodyTypeIdReader extends fb.Reader<MsgBodyTypeId> {
  const _MsgBodyTypeIdReader();

  @override
  int get size => 1;

  @override
  MsgBodyTypeId read(fb.BufferContext bc, int offset) =>
      new MsgBodyTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Date {
  Date._(this._bc, this._bcOffset);

  static const fb.Reader<Date> reader = const _DateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get year => const fb.Int32Reader().read(_bc, _bcOffset + 0);
  int get month => const fb.Int32Reader().read(_bc, _bcOffset + 4);
  int get day => const fb.Int32Reader().read(_bc, _bcOffset + 8);

  @override
  String toString() {
    return 'Date{year: $year, month: $month, day: $day}';
  }
}

class _DateReader extends fb.StructReader<Date> {
  const _DateReader();

  @override
  int get size => 12;

  @override
  Date createObject(fb.BufferContext bc, int offset) => 
    new Date._(bc, offset);
}

class DateBuilder {
  DateBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  int finish(int year, int month, int day) {
    fbBuilder.putInt32(day);
    fbBuilder.putInt32(month);
    fbBuilder.putInt32(year);
    return fbBuilder.offset;
  }

}

class DateObjectBuilder extends fb.ObjectBuilder {
  final int _year;
  final int _month;
  final int _day;

  DateObjectBuilder({
    int year,
    int month,
    int day,
  })
      : _year = year,
        _month = month,
        _day = day;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.putInt32(_day);
    fbBuilder.putInt32(_month);
    fbBuilder.putInt32(_year);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Person {
  Person._(this._bc, this._bcOffset);
  factory Person(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Person> reader = const _PersonReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get firstName => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get lastName => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  String get telephone => const fb.StringReader().vTableGet(_bc, _bcOffset, 8, null);
  Date get birthDate => Date.reader.vTableGet(_bc, _bcOffset, 10, null);
  double get height => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);

  @override
  String toString() {
    return 'Person{firstName: $firstName, lastName: $lastName, telephone: $telephone, birthDate: $birthDate, height: $height}';
  }
}

class _PersonReader extends fb.TableReader<Person> {
  const _PersonReader();

  @override
  Person createObject(fb.BufferContext bc, int offset) => 
    new Person._(bc, offset);
}

class PersonBuilder {
  PersonBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addFirstNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLastNameOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTelephoneOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBirthDate(int offset) {
    fbBuilder.addStruct(3, offset);
    return fbBuilder.offset;
  }
  int addHeight(double height) {
    fbBuilder.addFloat64(4, height);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersonObjectBuilder extends fb.ObjectBuilder {
  final String _firstName;
  final String _lastName;
  final String _telephone;
  final DateObjectBuilder _birthDate;
  final double _height;

  PersonObjectBuilder({
    String firstName,
    String lastName,
    String telephone,
    DateObjectBuilder birthDate,
    double height,
  })
      : _firstName = firstName,
        _lastName = lastName,
        _telephone = telephone,
        _birthDate = birthDate,
        _height = height;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int firstNameOffset = fbBuilder.writeString(_firstName);
    final int lastNameOffset = fbBuilder.writeString(_lastName);
    final int telephoneOffset = fbBuilder.writeString(_telephone);

    fbBuilder.startTable();
    if (firstNameOffset != null) {
      fbBuilder.addOffset(0, firstNameOffset);
    }
    if (lastNameOffset != null) {
      fbBuilder.addOffset(1, lastNameOffset);
    }
    if (telephoneOffset != null) {
      fbBuilder.addOffset(2, telephoneOffset);
    }
    if (_birthDate != null) {
      fbBuilder.addStruct(3, _birthDate.finish(fbBuilder));
    }
    fbBuilder.addFloat64(4, _height);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Car {
  Car._(this._bc, this._bcOffset);
  factory Car(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Car> reader = const _CarReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get make => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get model => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  Date get year => Date.reader.vTableGet(_bc, _bcOffset, 8, null);

  @override
  String toString() {
    return 'Car{make: $make, model: $model, year: $year}';
  }
}

class _CarReader extends fb.TableReader<Car> {
  const _CarReader();

  @override
  Car createObject(fb.BufferContext bc, int offset) => 
    new Car._(bc, offset);
}

class CarBuilder {
  CarBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addMakeOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addModelOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addYear(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CarObjectBuilder extends fb.ObjectBuilder {
  final String _make;
  final String _model;
  final DateObjectBuilder _year;

  CarObjectBuilder({
    String make,
    String model,
    DateObjectBuilder year,
  })
      : _make = make,
        _model = model,
        _year = year;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int makeOffset = fbBuilder.writeString(_make);
    final int modelOffset = fbBuilder.writeString(_model);

    fbBuilder.startTable();
    if (makeOffset != null) {
      fbBuilder.addOffset(0, makeOffset);
    }
    if (modelOffset != null) {
      fbBuilder.addOffset(1, modelOffset);
    }
    if (_year != null) {
      fbBuilder.addStruct(2, _year.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class People {
  People._(this._bc, this._bcOffset);
  factory People(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<People> reader = const _PeopleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Person> get array => const fb.ListReader<Person>(Person.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'People{array: $array}';
  }
}

class _PeopleReader extends fb.TableReader<People> {
  const _PeopleReader();

  @override
  People createObject(fb.BufferContext bc, int offset) => 
    new People._(bc, offset);
}

class PeopleBuilder {
  PeopleBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addArrayOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PeopleObjectBuilder extends fb.ObjectBuilder {
  final List<PersonObjectBuilder> _array;

  PeopleObjectBuilder({
    List<PersonObjectBuilder> array,
  })
      : _array = array;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int arrayOffset = _array?.isNotEmpty == true
        ? fbBuilder.writeList(_array.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (arrayOffset != null) {
      fbBuilder.addOffset(0, arrayOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Cars {
  Cars._(this._bc, this._bcOffset);
  factory Cars(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Cars> reader = const _CarsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Car> get cars => const fb.ListReader<Car>(Car.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'Cars{cars: $cars}';
  }
}

class _CarsReader extends fb.TableReader<Cars> {
  const _CarsReader();

  @override
  Cars createObject(fb.BufferContext bc, int offset) => 
    new Cars._(bc, offset);
}

class CarsBuilder {
  CarsBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addCarsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CarsObjectBuilder extends fb.ObjectBuilder {
  final List<CarObjectBuilder> _cars;

  CarsObjectBuilder({
    List<CarObjectBuilder> cars,
  })
      : _cars = cars;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int carsOffset = _cars?.isNotEmpty == true
        ? fbBuilder.writeList(_cars.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (carsOffset != null) {
      fbBuilder.addOffset(0, carsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Timestamps {
  Timestamps._(this._bc, this._bcOffset);
  factory Timestamps(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Timestamps> reader = const _TimestampsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int> get list => const fb.ListReader<int>(const fb.Uint64Reader()).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'Timestamps{list: $list}';
  }
}

class _TimestampsReader extends fb.TableReader<Timestamps> {
  const _TimestampsReader();

  @override
  Timestamps createObject(fb.BufferContext bc, int offset) => 
    new Timestamps._(bc, offset);
}

class TimestampsBuilder {
  TimestampsBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addListOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TimestampsObjectBuilder extends fb.ObjectBuilder {
  final List<int> _list;

  TimestampsObjectBuilder({
    List<int> list,
  })
      : _list = list;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int listOffset = _list?.isNotEmpty == true
        ? fbBuilder.writeListUint64(_list)
        : null;

    fbBuilder.startTable();
    if (listOffset != null) {
      fbBuilder.addOffset(0, listOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class MsgHeader {
  MsgHeader._(this._bc, this._bcOffset);
  factory MsgHeader(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MsgHeader> reader = const _MsgHeaderReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get cmd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get status => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get timestamp => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'MsgHeader{cmd: $cmd, status: $status, timestamp: $timestamp}';
  }
}

class _MsgHeaderReader extends fb.TableReader<MsgHeader> {
  const _MsgHeaderReader();

  @override
  MsgHeader createObject(fb.BufferContext bc, int offset) => 
    new MsgHeader._(bc, offset);
}

class MsgHeaderBuilder {
  MsgHeaderBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addCmd(int cmd) {
    fbBuilder.addInt32(0, cmd);
    return fbBuilder.offset;
  }
  int addStatus(int status) {
    fbBuilder.addInt32(1, status);
    return fbBuilder.offset;
  }
  int addTimestamp(int timestamp) {
    fbBuilder.addUint64(2, timestamp);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MsgHeaderObjectBuilder extends fb.ObjectBuilder {
  final int _cmd;
  final int _status;
  final int _timestamp;

  MsgHeaderObjectBuilder({
    int cmd,
    int status,
    int timestamp,
  })
      : _cmd = cmd,
        _status = status,
        _timestamp = timestamp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    fbBuilder.addInt32(0, _cmd);
    fbBuilder.addInt32(1, _status);
    fbBuilder.addUint64(2, _timestamp);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class FbMsg {
  FbMsg._(this._bc, this._bcOffset);
  factory FbMsg(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FbMsg> reader = const _FbMsgReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MsgHeader get header => MsgHeader.reader.vTableGet(_bc, _bcOffset, 4, null);
  MsgBodyTypeId get bodyType => new MsgBodyTypeId.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  dynamic get body {
    switch (bodyType?.value) {
      case 1: return People.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 2: return Cars.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 3: return Timestamps.reader.vTableGet(_bc, _bcOffset, 8, null);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'FbMsg{header: $header, bodyType: $bodyType, body: $body}';
  }
}

class _FbMsgReader extends fb.TableReader<FbMsg> {
  const _FbMsgReader();

  @override
  FbMsg createObject(fb.BufferContext bc, int offset) => 
    new FbMsg._(bc, offset);
}

class FbMsgBuilder {
  FbMsgBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addHeaderOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBodyType(MsgBodyTypeId bodyType) {
    fbBuilder.addUint8(1, bodyType?.value);
    return fbBuilder.offset;
  }
  int addBodyOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FbMsgObjectBuilder extends fb.ObjectBuilder {
  final MsgHeaderObjectBuilder _header;
  final MsgBodyTypeId _bodyType;
  final dynamic _body;

  FbMsgObjectBuilder({
    MsgHeaderObjectBuilder header,
    MsgBodyTypeId bodyType,
    dynamic body,
  })
      : _header = header,
        _bodyType = bodyType,
        _body = body;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int headerOffset = _header?.getOrCreateOffset(fbBuilder);
    final int bodyOffset = _body?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (headerOffset != null) {
      fbBuilder.addOffset(0, headerOffset);
    }
    fbBuilder.addUint8(1, _bodyType?.value);
    if (bodyOffset != null) {
      fbBuilder.addOffset(2, bodyOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
